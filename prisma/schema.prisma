generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  email                   String?
  password                String
  name                    String?
  father_or_husband_name  String?
  mobile_number           String?
  alternate_mobile_number String?
  decryptedPassword       String?
  kyc                     KYC                     @default(NOT_INITIALIZED)
  role                    Role
  membership              Membership              @default(BASIC)
  referralAgencyCode      String?
  date_of_birth           String?
  isKycAgent              Boolean                 @default(false)
  demat_account           String?
  private_key             String?                 @unique
  pw_id                   String?                 @unique
  rm_id                   String?                 @unique
  DSCDetails              DSCDETAILS[]
  documents               Document[]
  KycAgency               KycAgency?
  nominee                 Nominee?
  shareHoldingType        ShareHoldingType[]
  ProjectEnrolledStatus   ProjectEnrolledStatus[]
}

model KycAgency {
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt
  id                    String   @id @default(cuid())
  agencyCode            String?  @unique
  userId                String   @unique
  licenseValidityInYear Int?
  user                  User     @relation(fields: [userId], references: [id])
}

model Document {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        String   @id @default(cuid())
  title     String
  url       String
  amount    Int?
  userId    String?
  status    STATUS   @default(PENDING)
  utrNo     String?
  user      User?    @relation(fields: [userId], references: [id])
}

model DSCDETAILS {
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  id             String    @id @default(cuid())
  DscCreatedDate String?
  DscExpiryDate  String?
  DSCStatus      DSCSTATUS @default(NOT_RECEIVED)
  userId         String?
  user           User?     @relation(fields: [userId], references: [id])
}

model Nominee {
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique
  name         String?
  relationship String
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
}

model KycHandler {
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  handlerId        String
  identifier       String
  updatedKycStatus String
  id               String   @id @default(cuid())
}

model ShareHoldingType {
  id             String  @id @default(cuid())
  InvestmentType String
  allotedShare   Int?
  userPWId       String?
  userId         String
  user           User    @relation(fields: [userId], references: [id])
}

model ProjectEnrolledStatus {
  id                           String         @id @default(cuid())
  projectName                  String?
  projectStatus                PROJECTSTATUS?
  userId                       String?
  user                         User?          @relation(fields: [userId], references: [id])
  totalInvestedAmountinProject String?
}

enum PROJECTSTATUS {
  ENROLLED
  NOT_ENROLLED
}

enum Role {
  ADMIN
  USER
  AGENT
}

enum Membership {
  BASIC
  ADVANCE
}

enum DSCSTATUS {
  NOT_RECEIVED
  RECEIVED
}

enum KYC {
  NOT_INITIALIZED
  SUBMITTED
  ONGOING
  REJECTED
  APPROVED
  AGENT_APPROVED
}

enum STATUS {
  NOT_INITILAIZED
  PENDING
  APPROVED
  REJECTED
}
