generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                       @id @default(cuid())
  createdAt                 DateTime                     @default(now())
  updatedAt                 DateTime                     @updatedAt
  email                     String?
  password                  String
  name                      String?
  father_or_husband_name    String?
  mobile_number             String?
  alternate_mobile_number   String?
  decryptedPassword         String?
  Address                   String?
  panCardNumber             String?
  aadharCardNumber          String?                      @unique
  kyc                       KYC                          @default(NOT_INITIALIZED)
  role                      Role
  membership                Membership                   @default(BASIC)
  referralAgencyCode        String?
  date_of_birth             String?
  // stepCompleted           Int?                    @default(0)
  isKycAgent                Boolean                      @default(false)
  demat_account             String?
  private_key               String?                      @unique
  pw_id                     String?                      @unique
  rm_id                     String?                      @unique
  DSCDetails                DSCDETAILS[]
  documents                 Document[]
  KycAgency                 KycAgency?
  nominee                   Nominee?
  kycApprovalDate           DateTime?
  shareHoldingType          ShareHoldingType[]
  ProjectEnrolledStatus     ProjectEnrolledStatus[]
  ReferralKYCTransaction    ReferralKYCTransaction[]
  ReferralProjectransaction ReferralProjectTransaction[]
}

model KycAgency {
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @default(now()) @updatedAt
  id                         String                       @id @default(cuid())
  agencyCode                 String                       @unique
  userId                     String                       @unique
  licenseValidityInYear      Int?
  AgencyIncome               AgencyIncome[]
  user                       User                         @relation(fields: [userId], references: [id])
  ReferralKYCTransaction     ReferralKYCTransaction[]
  ReferralProjectTransaction ReferralProjectTransaction[]
  SalesPerson                SalesPerson[]
  ReferralSalesTransaction   ReferralSalesTransaction[]
}

model Document {
  createdAt                    DateTime                    @default(now())
  updatedAt                    DateTime                    @default(now()) @updatedAt
  id                           String                      @id @default(cuid())
  title                        String
  url                          String
  amount                       Int?
  referralProjectMoneytoAgency ReferralProjectTransaction?
  approvalDocumentDate         DateTime?
  approvalDate                 String?
  userId                       String?
  status                       STATUS                      @default(PENDING)
  utrNo                        String?
  user                         User?                       @relation(fields: [userId], references: [id])
}

model DSCDETAILS {
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  id             String    @id @default(cuid())
  DscCreatedDate String?
  DscExpiryDate  String?
  DSCStatus      DSCSTATUS @default(NOT_RECEIVED)
  userId         String?
  user           User?     @relation(fields: [userId], references: [id])
}

model Nominee {
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique
  name         String?
  relationship String
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
}

model KycHandler {
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  handlerId        String
  identifier       String
  updatedKycStatus String
  id               String   @id @default(cuid())
}

model ShareHoldingType {
  id             String    @id @default(cuid())
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
  InvestmentType String // COMMON_KYC_SHARE ,ADVANCE_KYC_SHARE, HAJIPUR_PROJECT_SHARE, AGRA_PROJECT_SHARE
  allotedShare   Int?
  status         String? //  TRANSFERRED, UNDER_PROCESS, NOT_ALLOTED_YET
  userPWId       String?
  userId         String
  user           User      @relation(fields: [userId], references: [id])
}

model ProjectEnrolledStatus {
  createdAt                    DateTime?      @default(now())
  updatedAt                    DateTime?      @default(now()) @updatedAt
  id                           String         @id @default(cuid())
  projectName                  String?
  projectStatus                PROJECTSTATUS?
  userId                       String
  user                         User           @relation(fields: [userId], references: [id])
  totalInvestedAmountinProject String?
}

model AgencyIncome {
  id           String    @id @default(cuid())
  AgencyId     String
  userId       String
  month        String
  totalEarning Int
  KycAgency    KycAgency @relation(fields: [AgencyId], references: [id])
}

model WalletTransactionAndBalance {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime?         @default(now())
  updatedAt    DateTime?         @default(now()) @updatedAt
  category     REFERRAL_CATEGORY
  amount       Int
  agencyCode   String?
  metaData     Json?             @db.Json
  type         String?
  finalBalance Int?
}

model ReferralKYCTransaction {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @default(now()) @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @unique
  pwID         String     @unique
  agencyCode   String
  transferDate DateTime?
  KycAgency    KycAgency? @relation(fields: [kycAgencyId], references: [id])
  kycAgencyId  String?
}

model ReferralProjectTransaction {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @default(now()) @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  documentId   String     @unique
  document     Document   @relation(fields: [documentId], references: [id])
  pwID         String     @unique
  agencyCode   String
  transferDate DateTime?
  KycAgency    KycAgency? @relation(fields: [kycAgencyId], references: [id])
  kycAgencyId  String?
}

model WithdrawlRequest {
  id         String          @id @default(cuid())
  createdAt  DateTime?       @default(now())
  updatedAt  DateTime?       @updatedAt
  amount     Int
  agencyCode String
  status     WITHDRAW_STATUS @default(PENDING)
}

model ReferralSalesTransaction {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @default(now()) @updatedAt
  salesPerson   SalesPerson @relation(fields: [salesPersonId], references: [id])
  salesPersonId String      @unique
  agencyCode    String
  transferDate  DateTime?
  KycAgency     KycAgency?  @relation(fields: [kycAgencyId], references: [id])
  kycAgencyId   String?
}

model SalesPerson {
  id                               String                    @id @default(cuid())
  createdAt                        DateTime?                 @default(now())
  updatedAt                        DateTime?                 @updatedAt
  type                             TYPE
  KycAgency                        KycAgency?                @relation(fields: [kycAgencycode], references: [agencyCode])
  kycAgencycode                    String?
  approvalStatus                   STATUS                    @default(NOT_INITILAIZED)
  approvalDate                     DateTime?
  referralSalesPersonMoneyToAgency ReferralSalesTransaction?
  name                             String?
  email                            String
  mobileNumber                     String
  address                          Json?
  extraInfo                        Json?
  SalesPersonDocument              SalesPersonDocument[]
}

model SalesPersonDocument {
  id            String      @id @default(cuid())
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  title         String?
  status        STATUS      @default(NOT_INITILAIZED)
  salesPerson   SalesPerson @relation(fields: [salesPersonId], references: [id])
  url           String?
  salesPersonId String
}

enum TYPE {
  CONFECTIONARY
  DISTRIBUTOR
  SUPERSTOCKIST
}

enum WITHDRAW_STATUS {
  PENDING
  TRANSFERRED
}

enum REFERRAL_CATEGORY {
  DEPOSIT_KYC
  DEPOSIT_PROJECT
  DEPOSIT_SELF
  DEPOSIT_SALES
  DEPOSIT_AGENCY
  WITHDRAWL
}

enum PROJECTSTATUS {
  ENROLLED
  NOT_ENROLLED
}

enum Role {
  ADMIN
  USER
  AGENT
}

enum Membership {
  BASIC
  ADVANCE
}

enum DSCSTATUS {
  NOT_RECEIVED
  RECEIVED
}

enum KYC {
  NOT_INITIALIZED
  SUBMITTED
  ONGOING
  REJECTED
  APPROVED
  AGENT_APPROVED
}

enum STATUS {
  NOT_INITILAIZED
  PENDING
  APPROVED
  REJECTED
}
